package factorization;

import function.BigEvclid;

import java.math.BigInteger;

public class Rho {
    BigEvclid bigEvclid = new BigEvclid();

    public BigInteger f(BigInteger x) {
        BigInteger t;
        t = x.pow(2).add(BigInteger.ONE);
        return t;
    }

    public void rho_pollard(BigInteger n) {
        BigInteger x0 = BigInteger.TWO;
        BigInteger a = f(x0);
        BigInteger b = f(x0);
        BigInteger q;
        BigInteger p;
        do {
            a = f(a);
            b = f(b);
            b = f(b);
            q = bigEvclid.normal_algorithm(a.subtract(b), n);
        }
        while (q.equals(BigInteger.ONE));
        p = n.divide(q);
        System.out.println("q  :" + q);
        System.out.println("p  :" + p);

    }

    public static void main(String[] args) {
        Rho r = new Rho();
//     System.out.println(new BigInteger("2318553827267041599931064141028026591078453523755133761420994537426231546233197332557815088229590256567177621743082082713100922775483908922217521567861530205737139513575691852244362271068595653732088709994411183164926098663772268120044065766077197167667585331637038825079142327613226776540743407081106744519").isProbablePrime(30));
//        r.rho_pollard(new BigInteger("2318553827267041599931064141028026591078453523755133761420994537426231546233197332557815088229590256567177621743082082713100922775483908922217521567861530205737139513575691852244362271068595653732088709994411183164926098663772268120044065766077197167667585331637038825079142327613226776540743407081106744519"));
    BigInteger b = new BigInteger("2318553827267041599931064141028026591078453523755133761420994537426231546233197332557815088229590256567177621743082082713100922775483908922217521567861530205737139513575691852244362271068595653732088709994411183164926098663772268120044065766077197167667585331637038825079142327613226776540743407081106744519");
        System.out.println(b.mod(new BigInteger("13")).equals(BigInteger.ZERO));
    }
}
